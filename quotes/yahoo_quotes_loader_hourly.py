import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
import logging
import os
import time  # –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

CHUNK_DAYS = 60  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–Ω—è—Ö
TOTAL_DAYS = 730  # —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –Ω–∞—á–∏–Ω–∞—Ç—å

def setup_console_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    logger = logging.getLogger("yahoo_logger")
    logger.setLevel(logging.INFO)

    if logger.hasHandlers():
        logger.handlers.clear()

    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    ch.setFormatter(formatter)

    logger.addHandler(ch)
    return logger

def fetch_hourly_data(ticker: str, logger):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Å–æ–≤—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ TOTAL_DAYS –¥–Ω–µ–π,
    —Ä–∞–∑–±–∏–≤–∞—è –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ CHUNK_DAYS –¥–Ω–µ–π.
    """
    now = datetime.now()
    start_total = now - timedelta(days=TOTAL_DAYS)
    end_total = now

    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker} —Å {start_total.date()} –ø–æ {end_total.date()}")

    all_chunks = []
    chunk_start = start_total

    while chunk_start < end_total:
        chunk_end = min(chunk_start + timedelta(days=CHUNK_DAYS), end_total)
        logger.info(f"üìÖ –ó–∞–ø—Ä–æ—Å –∑–∞ –ø–µ—Ä–∏–æ–¥: {chunk_start.date()} ‚Äì {chunk_end.date()}")

        try:
            df = yf.download(
                ticker,
                start=chunk_start.strftime("%Y-%m-%d"),
                end=chunk_end.strftime("%Y-%m-%d"),
                interval="1h",
                progress=False
            )
            if df.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {chunk_start.date()} ‚Äì {chunk_end.date()}")
            else:
                df = df[['Open', 'High', 'Low', 'Close', 'Volume']]
                df.index.name = 'Datetime'
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
                all_chunks.append(df)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

        # —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        chunk_start = chunk_end
        time.sleep(1)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä

    if all_chunks:
        result = pd.concat(all_chunks).sort_index()
        output_file = f"{ticker.upper()}_1h.csv"
        result.to_csv(output_file)
        logger.info(f"üíæ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(result)}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
    else:
        logger.warning("üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

def main():
    logger = setup_console_logger()

    tickers_file = "../tickers.txt"
    if not os.path.exists(tickers_file):
        logger.error(f"–§–∞–π–ª {tickers_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(tickers_file, "r", encoding="utf-8") as f:
        tickers = [line.strip() for line in f if line.strip()]

    if not tickers:
        logger.error("–í —Ñ–∞–π–ª–µ tickers.txt –Ω–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤.")
        return

    for idx, ticker in enumerate(tickers, 1):
        print(f"\n=== ‚ñ∂ [{idx}/{len(tickers)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ä–∞: {ticker} ===")
        fetch_hourly_data(ticker, logger)

if __name__ == "__main__":
    main()
